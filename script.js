
let dnaMain = JSON.parse(localStorage.getItem("dna_main") || "[]");
let dnaAion = JSON.parse(localStorage.getItem("dna_aion") || "[]");
let trueResults = JSON.parse(localStorage.getItem("true_results") || []);

function updateDNA() {
  document.getElementById("dna-main").textContent = dnaMain.join(" / ");
  document.getElementById("dna-aion").textContent = dnaAion.join(" / ");
}

function getLeastFrequentPosition(arr) {
  let count = { p: 0, b: 0 };
  arr.forEach(c => { if (c === 'p' || c === 'b') count[c]++; });
  let minChar = count.p < count.b ? 'p' : (count.b < count.p ? 'b' : null);
  if (!minChar) return null;
  return arr.indexOf(minChar);
}

function isUniform(arr) {
  return arr.every(c => c === arr[0]);
}

function analyzePattern() {
  const pattern = document.getElementById("pattern").value.trim().toLowerCase();
  if (pattern.length !== 6) return alert("‚ùó ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏Ñ‡πâ‡∏≤‡πÑ‡∏û‡πà 6 ‡∏ï‡∏±‡∏ß");

  const main = pattern.slice(0,3).split('');
  const sub = pattern.slice(3,6).split('');

  if (isUniform(main)) {
    if (isUniform(sub)) return alert("‚ùå ‡πÄ‡∏Ñ‡πâ‡∏≤‡πÑ‡∏û‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡πâ‡∏≤‡∏£‡∏≠‡∏á‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏´‡∏°‡∏î ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°");
    else {
      let pos = getLeastFrequentPosition(sub);
      if (pos === null) return alert("‚ùå ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
      const mainVal = main[pos], subVal = sub[pos];
      const prediction = mainVal === subVal ? 'P' : 'B';
      alert(`üß† ‡∏™‡∏π‡∏ï‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (‡∏¢‡∏∂‡∏î‡πÄ‡∏Ñ‡πâ‡∏≤‡∏£‡∏≠‡∏á): ${prediction === 'P' ? 'üîµ P' : 'üî¥ B'}`);
      return prediction;
    }
  } else {
    let pos = getLeastFrequentPosition(main);
    if (pos === null) return alert("‚ùå ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
    const mainVal = main[pos], subVal = sub[pos];
    const prediction = mainVal === subVal ? 'P' : 'B';
    alert(`üß† ‡∏™‡∏π‡∏ï‡∏£‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ${prediction === 'P' ? 'üîµ P' : 'üî¥ B'}`);
    return prediction;
  }
}

function submitResult(val) {
  if (val === 'T') {
    alert("‚è≠ ‡πÄ‡∏™‡∏°‡∏≠ - ‡∏Ç‡πâ‡∏≤‡∏°‡∏ï‡∏≤‡∏ô‡∏µ‡πâ");
    document.getElementById("pattern").value = '';
    return;
  }
  const pattern = document.getElementById("pattern").value.trim().toLowerCase();
  if (pattern.length !== 6) return alert("‚ùó ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÄ‡∏Ñ‡πâ‡∏≤‡πÑ‡∏û‡πà 6 ‡∏ï‡∏±‡∏ß‡∏Å‡πà‡∏≠‡∏ô");

  const main = pattern.slice(0,3).split('');
  const sub = pattern.slice(3,6).split('');

  let prediction = null;

  if (isUniform(main)) {
    if (isUniform(sub)) {
      document.getElementById("pattern").value = '';
      return;
    }
    let pos = getLeastFrequentPosition(sub);
    if (pos !== null) {
      prediction = main[pos] === sub[pos] ? 'P' : 'B';
    }
  } else {
    let pos = getLeastFrequentPosition(main);
    if (pos !== null) {
      prediction = main[pos] === sub[pos] ? 'P' : 'B';
    }
  }

  if (!prediction) {
    alert("‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ");
    document.getElementById("pattern").value = '';
    return;
  }

  dnaMain.push(prediction === val ? "‚ö™Ô∏è" : "üî¥");
  trueResults.push(val);

  localStorage.setItem("dna_main", JSON.stringify(dnaMain));
  localStorage.setItem("true_results", JSON.stringify(trueResults));
  updateDNA();
  analyzeAion();

  document.getElementById("pattern").value = '';
}


function analyzeAion() {
  const recent = trueResults.slice(-20); // long memory
  if (recent.length < 5) {
    document.getElementById("aion-prediction").textContent = "(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 5 ‡∏ï‡∏≤)";
    return;
  }

  const last5 = recent.slice(-5);
  let count = { P: 0, B: 0 };
  last5.forEach(r => { if (r === 'P') count.P++; if (r === 'B') count.B++; });

  // Detect long streaks (mild mgt detection)
  let streak = 1;
  for (let i = recent.length - 1; i > 0; i--) {
    if (recent[i] === recent[i - 1]) streak++;
    else break;
  }

  // Pattern Classification
  const patternName = (() => {
    const seq = recent.join("");
    if (/PBPBPB|BPBPBP/.test(seq.slice(-6))) return "‡∏•‡∏π‡∏Å‡∏Ñ‡∏π‡πà";
    if (/(.)\1{3,}/.test(seq)) return "‡∏°‡∏±‡∏á‡∏Å‡∏£";
    if (/PPBB|BBPP/.test(seq.slice(-4))) return "‡∏™‡∏≠‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏î";
    if (seq.endsWith("PPB") || seq.endsWith("BBP")) return "‡∏ä‡∏≤‡∏¢‡πÇ‡∏Ñ‡∏£‡∏á";
    return "‡πÑ‡∏°‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô";
  })();

  // Power Scoring
  const power = {
    P: recent.filter(x => x === "P").length,
    B: recent.filter(x => x === "B").length,
  };
  const dominant = power.P > power.B ? "üîµ P" : power.B > power.P ? "üî¥ B" : ["üîµ P", "üî¥ B"][Math.floor(Math.random() * 2)];
  const diff = Math.abs(power.P - power.B);
  let confidence = 65 + diff * 2;

  // Generate explanation
  let trend = "";
  let style = "";
  if (streak >= 4) {
    trend = `‡∏ù‡∏±‡πà‡∏á ${recent[recent.length - 1]} ‡∏ä‡∏ô‡∏∞‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô ${streak} ‡∏ï‡∏≤`;
    style = "‡∏°‡∏±‡∏á‡∏Å‡∏£‡∏¢‡∏≤‡∏ß‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏´‡∏•‡∏∏‡∏î ‡∏°‡∏µ‡πÅ‡∏£‡∏á‡∏•‡∏≤‡∏Å";
    confidence += 5;
  } else {
    trend = `‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ä‡πà‡∏ß‡∏á‡∏´‡∏•‡∏±‡∏á ${dominant.includes("P") ? "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô" : "‡πÅ‡∏î‡∏á"} ‡∏î‡∏π‡πÄ‡∏î‡πà‡∏ô`;
    style = `‡∏û‡∏ö‡πÄ‡∏Ñ‡πâ‡∏≤‡πÑ‡∏û‡πà: ${patternName}`;
  }

  const msg = `üß† ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢: ${dominant}\nüéØ ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${trend} ‚Üí ${style}\n‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: ${confidence > 85 ? 85 : confidence}%`;
  document.getElementById("aion-prediction").textContent = msg;
  dnaAion.push(dominant.includes("P") ? "‚ö™Ô∏è" : "üî¥");
  localStorage.setItem("dna_aion", JSON.stringify(dnaAion));
  updateDNA();
}

  const recent = trueResults.slice(-5);
  if (recent.length < 5) {
    document.getElementById("aion-prediction").textContent = "(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 5 ‡∏ï‡∏≤)";
    return;
  }

  const apiKey = "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";

  document.getElementById("aion-prediction").textContent = "üß† ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...";

  fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Authorization": "Bearer " + apiKey,
      "Content-Type": "application/json"
    },
    body: JSON.stringify({
      model: "gpt-4",
      messages: [
        { role: "system", content: "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ã‡∏µ‡∏¢‡∏ô‡∏ö‡∏≤‡∏Ñ‡∏≤‡∏£‡πà‡∏≤ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏Ñ‡πâ‡∏≤‡πÑ‡∏û‡πà‡πÅ‡∏ö‡∏ö AION Style" },
        { role: "user", content: "‡∏ú‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 5 ‡∏ï‡∏≤: " + recent.join(", ") + ". ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ß‡πà‡∏≤‡∏ù‡∏±‡πà‡∏á‡πÑ‡∏´‡∏ô‡∏à‡∏∞‡∏°‡∏≤ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏• ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÄ‡∏õ‡πá‡∏ô % ‡∏î‡πâ‡∏ß‡∏¢" }
      ]
    })
  }).then(r => r.json()).then(data => {
    const msg = data.choices?.[0]?.message?.content || "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI";
    document.getElementById("aion-prediction").textContent = msg;
    dnaAion.push(msg.includes("P") ? "‚ö™Ô∏è" : "üî¥");
    localStorage.setItem("dna_aion", JSON.stringify(dnaAion));
    updateDNA();
  }).catch(err => {
    document.getElementById("aion-prediction").textContent = "‚ùå GPT ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: " + err.message;
  });
}

function clearDNA() {
  localStorage.removeItem("dna_main");
  localStorage.removeItem("dna_aion");
  localStorage.removeItem("true_results");
  dnaMain = []; dnaAion = []; trueResults = [];
  updateDNA();
}

updateDNA();
